name: Build photos

on: [push]

env:
  IMAGE_NAME: photosapp

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build it

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: "13.2.0"
      - name: npm build photos-ui
        env:
          CI: false
        run: |
          cd photos-ui
          npm install
          npm run build
      - name: Use python ${{ matrix.node-version }}
        uses: actions/setup-python@v1
        with:
          python-version: "3.7.x"
      - name: Python build and test
        run: |
          pip install -U pip
          pip install pipenv
          pipenv sync --dev --python python3.7
          pipenv run pre-commit run -a
          pipenv run pytest

      - name: Build image
        run: |
          docker build . --label "build.build-no=$GITHUB_RUN_NUMBER" --label "build.build-git-hash=$GITHUB_SHA" --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
